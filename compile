#!/bin/sh
#echo gcc SYS1.c -masm=intel -m16 -S
#gcc -m16 -c -mllvm --x86-asm-syntax=intel -Wno-incompatible-library-redeclaration -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti SYS1.c
#binutils/objconv -fnasm SYS1.o
#sed -i -e 's/align=1//g' -e 's/[a-z]*execute//g' -e 's/: *function//g' -e '/default *rel/d' SYS1.asm
#python gcc2nasm.py SYS1.s SYS1.asm
#compile
docker build -t anos-macos-build .
CID=`docker run -di anos-macos-build`
docker cp $CID:/opt/anos/boot.bin ./boot.bin
docker cp $CID:/opt/anos/boot.dis ./boot.dis
docker cp $CID:SYS1.s ./SYS1.s
docker stop $CID > /dev/null 2>&1
docker rm $CID > /dev/null 2>&1
docker rmi $(docker images -f "dangling=true" -q) > /dev/null 2>&1
#python3 symbols.py
#toolchain/i386-elf-gcc -m32 -c SYS1.c -o SYS1.o -ffreestanding
#./nasm -f bin main.asm -o main.bin
#link
#toolchain/i386-elf-ld -m elf_i386 -o main.bin -Ttext 0x7c00 main.o SYS1.o --oformat binary
#dissassembly
rm disasm.asm
./ndisasm -b 16 boot.dis >disasm.asm

#python3 padding.py
#python3 link.py